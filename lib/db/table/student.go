//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Student = newStudentTable("", "student", "")

type studentTable struct {
	sqlite.Table

	// Columns
	Email sqlite.ColumnString
	Name  sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type StudentTable struct {
	studentTable

	EXCLUDED studentTable
}

// AS creates new StudentTable with assigned alias
func (a StudentTable) AS(alias string) *StudentTable {
	return newStudentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StudentTable with assigned schema name
func (a StudentTable) FromSchema(schemaName string) *StudentTable {
	return newStudentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StudentTable with assigned table prefix
func (a StudentTable) WithPrefix(prefix string) *StudentTable {
	return newStudentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StudentTable with assigned table suffix
func (a StudentTable) WithSuffix(suffix string) *StudentTable {
	return newStudentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStudentTable(schemaName, tableName, alias string) *StudentTable {
	return &StudentTable{
		studentTable: newStudentTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newStudentTableImpl("", "excluded", ""),
	}
}

func newStudentTableImpl(schemaName, tableName, alias string) studentTable {
	var (
		EmailColumn    = sqlite.StringColumn("email")
		NameColumn     = sqlite.StringColumn("name")
		allColumns     = sqlite.ColumnList{EmailColumn, NameColumn}
		mutableColumns = sqlite.ColumnList{NameColumn}
	)

	return studentTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Email: EmailColumn,
		Name:  NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
