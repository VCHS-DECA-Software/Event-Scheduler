// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountManagerClient is the client API for AccountManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountManagerClient interface {
	Create(ctx context.Context, in *AccountDetails, opts ...grpc.CallOption) (*WithStatus, error)
	Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*WithStatus, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Status, error)
	Delete(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Status, error)
}

type accountManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountManagerClient(cc grpc.ClientConnInterface) AccountManagerClient {
	return &accountManagerClient{cc}
}

func (c *accountManagerClient) Create(ctx context.Context, in *AccountDetails, opts ...grpc.CallOption) (*WithStatus, error) {
	out := new(WithStatus)
	err := c.cc.Invoke(ctx, "/AccountManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*WithStatus, error) {
	out := new(WithStatus)
	err := c.cc.Invoke(ctx, "/AccountManager/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/AccountManager/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) Delete(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/AccountManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountManagerServer is the server API for AccountManager service.
// All implementations must embed UnimplementedAccountManagerServer
// for forward compatibility
type AccountManagerServer interface {
	Create(context.Context, *AccountDetails) (*WithStatus, error)
	Authenticate(context.Context, *AuthRequest) (*WithStatus, error)
	Update(context.Context, *UpdateRequest) (*Status, error)
	Delete(context.Context, *Credentials) (*Status, error)
	mustEmbedUnimplementedAccountManagerServer()
}

// UnimplementedAccountManagerServer must be embedded to have forward compatible implementations.
type UnimplementedAccountManagerServer struct {
}

func (UnimplementedAccountManagerServer) Create(context.Context, *AccountDetails) (*WithStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccountManagerServer) Authenticate(context.Context, *AuthRequest) (*WithStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAccountManagerServer) Update(context.Context, *UpdateRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAccountManagerServer) Delete(context.Context, *Credentials) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAccountManagerServer) mustEmbedUnimplementedAccountManagerServer() {}

// UnsafeAccountManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountManagerServer will
// result in compilation errors.
type UnsafeAccountManagerServer interface {
	mustEmbedUnimplementedAccountManagerServer()
}

func RegisterAccountManagerServer(s grpc.ServiceRegistrar, srv AccountManagerServer) {
	s.RegisterService(&AccountManager_ServiceDesc, srv)
}

func _AccountManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).Create(ctx, req.(*AccountDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountManager/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).Authenticate(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountManager/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).Delete(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountManager_ServiceDesc is the grpc.ServiceDesc for AccountManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AccountManager",
	HandlerType: (*AccountManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AccountManager_Create_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _AccountManager_Authenticate_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AccountManager_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AccountManager_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/accounts.proto",
}
