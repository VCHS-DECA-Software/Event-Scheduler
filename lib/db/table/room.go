//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Room = newRoomTable("", "room", "")

type roomTable struct {
	sqlite.Table

	// Columns
	ID            sqlite.ColumnString
	JudgeCapacity sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type RoomTable struct {
	roomTable

	EXCLUDED roomTable
}

// AS creates new RoomTable with assigned alias
func (a RoomTable) AS(alias string) *RoomTable {
	return newRoomTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RoomTable with assigned schema name
func (a RoomTable) FromSchema(schemaName string) *RoomTable {
	return newRoomTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RoomTable with assigned table prefix
func (a RoomTable) WithPrefix(prefix string) *RoomTable {
	return newRoomTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RoomTable with assigned table suffix
func (a RoomTable) WithSuffix(suffix string) *RoomTable {
	return newRoomTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRoomTable(schemaName, tableName, alias string) *RoomTable {
	return &RoomTable{
		roomTable: newRoomTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newRoomTableImpl("", "excluded", ""),
	}
}

func newRoomTableImpl(schemaName, tableName, alias string) roomTable {
	var (
		IDColumn            = sqlite.StringColumn("id")
		JudgeCapacityColumn = sqlite.IntegerColumn("judge_capacity")
		allColumns          = sqlite.ColumnList{IDColumn, JudgeCapacityColumn}
		mutableColumns      = sqlite.ColumnList{JudgeCapacityColumn}
	)

	return roomTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		JudgeCapacity: JudgeCapacityColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
