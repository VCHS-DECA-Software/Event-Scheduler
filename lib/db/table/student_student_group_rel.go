//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var StudentStudentGroupRel = newStudentStudentGroupRelTable("", "student_student_group_rel", "")

type studentStudentGroupRelTable struct {
	sqlite.Table

	// Columns
	StudentGroupID sqlite.ColumnInteger
	StudentEmail   sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type StudentStudentGroupRelTable struct {
	studentStudentGroupRelTable

	EXCLUDED studentStudentGroupRelTable
}

// AS creates new StudentStudentGroupRelTable with assigned alias
func (a StudentStudentGroupRelTable) AS(alias string) *StudentStudentGroupRelTable {
	return newStudentStudentGroupRelTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StudentStudentGroupRelTable with assigned schema name
func (a StudentStudentGroupRelTable) FromSchema(schemaName string) *StudentStudentGroupRelTable {
	return newStudentStudentGroupRelTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StudentStudentGroupRelTable with assigned table prefix
func (a StudentStudentGroupRelTable) WithPrefix(prefix string) *StudentStudentGroupRelTable {
	return newStudentStudentGroupRelTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StudentStudentGroupRelTable with assigned table suffix
func (a StudentStudentGroupRelTable) WithSuffix(suffix string) *StudentStudentGroupRelTable {
	return newStudentStudentGroupRelTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStudentStudentGroupRelTable(schemaName, tableName, alias string) *StudentStudentGroupRelTable {
	return &StudentStudentGroupRelTable{
		studentStudentGroupRelTable: newStudentStudentGroupRelTableImpl(schemaName, tableName, alias),
		EXCLUDED:                    newStudentStudentGroupRelTableImpl("", "excluded", ""),
	}
}

func newStudentStudentGroupRelTableImpl(schemaName, tableName, alias string) studentStudentGroupRelTable {
	var (
		StudentGroupIDColumn = sqlite.IntegerColumn("student_group_id")
		StudentEmailColumn   = sqlite.StringColumn("student_email")
		allColumns           = sqlite.ColumnList{StudentGroupIDColumn, StudentEmailColumn}
		mutableColumns       = sqlite.ColumnList{}
	)

	return studentStudentGroupRelTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		StudentGroupID: StudentGroupIDColumn,
		StudentEmail:   StudentEmailColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
